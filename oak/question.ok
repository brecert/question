#[std]
#[memory(2048)]

// oakc std is very limited
fn strlen(str: &char) -> num {
    for (let i=0; str[i] != '\0'; i=i+1) {}
    return i
}

fn strcpy(dst: &char, src: &char) {
    for (let i=0; src[i] != '\0'; i=i+1) {
        dst[i] = src[i];
    }
    dst[i] = 0;
}

fn strcat(dst: &char, src: &char) {
    let offset = strlen(dst);
    for (let i=0; src[i] != '\0'; i=i+1) {
        dst[offset+i] = src[i];
    }
    dst[offset+i] = 0;
}

fn strcmp(s1: &char, s2: &char) -> num {
	let i1 = 0;
	let i2 = 0;
	while ((s1[i1] == s2[i2]) && (s1[i1] != '\0')) {
		i1+=1;
		i2+=1;
	}
	return ((s1[i1]) as num) - ((s2[i2]) as num)
}

fn input(buffer: &char) -> void {
    let i = 0;
    for (let ch = get_char(); ch != '\n'; ch = get_char()) {
        buffer[i] = ch;
        i = i + 1;
    }
}

fn question(prompt: &char, valid: &&char, valid_count: num) -> &char {
	let size = 256;
	let input_buffer = alloc(size) as &char;

	let matched_flag = -1;
	while (matched_flag < 0) {
		putstr(prompt);
		if(valid_count > 0) {
			putchar('(');
			for i in 0..valid_count {
				if(i > 0) {
					putstr(", ");
				}
				putstr(valid[i]);
			}
			putchar(')');
		}
		putstr(": ");
		
		input(input_buffer);

		if(!valid_count) {
			matched_flag = 0
		}

		for (let i=0;(i < valid_count) && (matched_flag < 0); i=i+1) {
			if (!strcmp(input_buffer, valid[i])) {
				matched_flag = i;
			}
		}

		if(matched_flag < 0) {
			putchar('"');
			putstr(input_buffer);
			putstrln("\" is not a valid answer")	
		}

		free input_buffer: strlen(input_buffer);
	}

	return !valid_count ? valid[matched_flag] : input_buffer
}

fn main() {
	let size = 2;

	let valid = alloc(size) as &&char;
	valid[0] = "bar"; valid[1] = "baz";

	let _ = question("foo", valid, 2);
}
